OnLoadMission = "ACRE Testmission";
author = "McDiod - based on Prometheus by nomisum";  //appears as author in overview and loading screen
overviewText = "ACRE Testmission"; //appears in overview and loading screen
onLoadName = "WIE DAS ACRE, SO DIE RÃœBEN"; //mission name for loading screen only
onLoadMissionTime = True;
disabledAI = 1; //1
enableDebugConsole = 1;
loadScreen = "pic\logo.paa";
respawnDelay = 9999;

#include "CSSA3\CSSA3_header.hpp"

//respawnDelay = 9999999; // 9999999 or greater = No Respawn
//Changes respawn, respawnDialog and respawnTemplates parameters.



class Header
{
	gameType = Seize;
	minPlayers = 15;
	maxPlayers = 112;
};


class Params
{
	class TimeOfDay
	{
		title = "Time of Day";
		values[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};
		texts[] = {"00:00","01:00","02:00","03:00","04:00","05:00","06:00","07:00","08:00","09:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00","18:00","19:00","20:00","21:00","22:00","23:00"};
		default = 8;
	};

	class WeatherSetting
    {
		title = "Weather Settings";
		values[] = {0,1,2,3};
		texts[] = {"SUNNY DAY","RAINY DAY","CLOUDY DAY","RANDOM WEATHER"};
		default = 0;
    };


	class Zeitbeschleunigung
	{
		title = "Time Acceleration";
		values[] = {1,2,4};
		texts[] = {"normal","2h in 1h","4h in 1h"};
		default = 1;
	};

	class EnableReplay
	{
		title = "enable replay";
		values[] = {false, true};
		texts[] = {"no", "yes"};
		default = false;
		isGlobal = 0;
	};

	class IsStreamable
	{
		title = "enable live stream (needs 'enable replay')";
		values[] = {false, true};
		texts[] = {"no","yes"};
		default = 0;
		isGlobal = 0;
	};

	class Debug_Mode
	{
		title = "Enable Debug Log";
		values[] = {0, 1};
		texts[] = {"no","yes"};
		default = 0;
	};

	class HC_enabled
	{
		title = "Enable HC";
		values[] = {0, 1};
		texts[] = {"no","yes"};
		default = 1;
	};


};

class CfgUnitInsignia
{
	class grad_command
	{
		displayName = "GRAD Command"; // Name displayed in Arsenal
		author = "Gruppe Adler"; // Author displayed in Arsenal
		texture = "pic\insignia_command.paa"; // Image path
		textureVehicle = ""; // Does nothing currently, reserved for future use
	};

	class grad_alpha
	{
		displayName = "GRAD Alpha"; // Name displayed in Arsenal
		author = "Gruppe Adler"; // Author displayed in Arsenal
		texture = "pic\insignia_alpha.paa"; // Image path
		textureVehicle = ""; // Does nothing currently, reserved for future use
	};

	class grad_bravo
	{
		displayName = "GRAD Bravo"; // Name displayed in Arsenal
		author = "Gruppe Adler"; // Author displayed in Arsenal
		texture = "pic\insignia_bravo.paa"; // Image path
		textureVehicle = ""; // Does nothing currently, reserved for future use
	};

	class grad_charlie
	{
		displayName = "GRAD Charlie"; // Name displayed in Arsenal
		author = "Gruppe Adler"; // Author displayed in Arsenal
		texture = "pic\insignia_charlie.paa"; // Image path
		textureVehicle = ""; // Does nothing currently, reserved for future use
	};

	class grad_delta
	{
		displayName = "GRAD Delta"; // Name displayed in Arsenal
		author = "Gruppe Adler"; // Author displayed in Arsenal
		texture = "pic\insignia_delta.paa"; // Image path
		textureVehicle = ""; // Does nothing currently, reserved for future use
	};

	class grad_heli
	{
		displayName = "GRAD Heli"; // Name displayed in Arsenal
		author = "Gruppe Adler"; // Author displayed in Arsenal
		texture = "pic\insignia_heli.paa"; // Image path
		textureVehicle = ""; // Does nothing currently, reserved for future use
	};
};

corpseManagerMode = 1; 					// Type of removed bodies: 0 - none, 1 - all, 2 - only respawnable, 3 - only non-respawnable
corpseLimit = 30;		 						// Max number of bodies which can be available at the same time. When exceeded, start deleting immediately.
corpseRemovalMinTime = 180; 		// Minimal time in seconds a body stays in the scene (can't be removed sooner).
corpseRemovalMaxTime = 300; 		// Maximal time in seconds after which a dead body is removed (can't stay longer)

wreckManagerMode = 1; 					// Type of removed wrecks: 0 - none, 1 - all, 2 - only respawnable, 3 - only non-respawnable
wreckLimit = 20; 								// Max number of wrecks which can be available at the same time. When exceeded, start deleting immediately.
wreckRemovalMinTime = 300; 			// Minimal time in seconds a wreck stays in the scene (can't be removed sooner).
wreckRemovalMaxTime = 1200;			// Maximal time in seconds after which a wreck is removed (can't stay longer)
